Every time the event loop takes a full trip, we call it a tick.
When we pass a function to process.nextTick(), we instruct the engine to invoke this function at the end of the current operation, before the nest event loop tick starts:

process.nextTick(() => {
	// do something
});

The event loop is busy processing the current function code. When this operation ends, the JS engine runs all the functions passed to nextTick calls during that operation.

Calling setTimeout(() => {}, 0) will execute the function at the end of next tick, much later than when using nextTick() which prioritizes the call and executes it just before the beginning of the next tick.

eg.

console.log("Hello => number 1");

setImmediate(() => {
	console.log("Running before the timeout => number 3");
});

setTimeout(() => {
	console.log("The timeout running last => number 4");
}, 0);

process.nextTick(() => {
	console.log("Running at next tick => number 2");
});

Output: 
Hello => number 1
Running at next tick => number 2
Running before the timeout => number 3
The timeout running last => number 4



When you want to execute some piece of code asynchronously, but as soon as possible, one option is to use the setImmediate() function provided by Node.js:

setImmediate(() => {
	// run something
});

Any function passed as the setImmediate() argument is a callback that's executed in the next iteration of the even loop.

A function passed to process.nextTick() is going to be executed on the current iteration of the event loop, after the current operation ends. This means it will always execute before setTimeout and setImmediate.

A setTimeout() callback with a 0ms delay is very similar to setImmediate(). The execution order will depend on various factors, but they will be both run in the next iteration of the event loop.

A process.nextTick callback is added to process.nextTick queue. A Promise.then() callback is added to promises microtask queue. A setTimeout, setImmediate callback is added to macrotask queue.

Event loop executes tasks in process.nextTick queue first, and then executes promises microtask queue, and then executes macrotask queue.

const baz = () => console.log("baz");
const foo = () => console.log("foo");
const zoo = () => console.log("zoo");

const start = () => {
	console.log("start");
	setImmediate(baz);
	new Promise((resolve, reject) => {
		resolve("bar");
	}).then(resolve => {
		console.log(resolve);
		process.nextTick(zoo);
	});
	process.nextTick(foo);
};

start();

// start foo bar zoo baz

In ES Modules, eg. mjs files, the execution order will be different:
// start bar foo zoo baz

This is because the ES Module being loaded is wrapped as an asynchronous operation, and thus the entire script is actually already in the promises microtask queue. So when the promise is immediately resolved, its callback is appended to the microtask queue. Node.js will attempt to clear the queue until moving to any other queue, and hence you will see it outputs bar first.